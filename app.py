import os
import jsmin
import csv
import random
import itertools
import sqlite3
from flask import Flask, jsonify, request, render_template, g
from flask_sqlalchemy import SQLAlchemy
from flask_assets import Environment, Bundle

# IP-related imports:
# import socket
# import ipinfo

# An IPCoordinate is a dictionary:
# {
#   ip: String
#   latitude: Number
#   longitude: Number
# }

# App configuration
app = Flask(__name__)
assets = Environment(app)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data/routers.sqlite3'
app.config['SQLALCHEMY_ECHO'] = True
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Set up IP address database and IP Address model
# Class inherits db.Model
db = SQLAlchemy(app)


class Routers(db.Model):
    # Autogenerated id (primary key)
    id = db.Column("id", db.Integer, primary_key=True)
    ip = db.Column(db.String(45))
    latitude = db.Column(db.String(20))
    longitude = db.Column(db.String(20))

    # init : Used to create an IPAddress object
    def __init__(self, ip, latitude, longitude):
        self.ip = ip
        self.latitude = latitude
        self.longitude = longitude

    # repr : Represent the object as a string
    def __repr__(self):
        return 'IP: ' + self.id + ', Latitude: ' + self.latitude + ', Longitude: ' + self.longitude


# Bundle javascript files into minified "bundle.js"
js = Bundle('js/jquery.min.js', 'js/store.js', 'js/animation.js', 'js/helpers.js', 'js/index.js',
            filters='jsmin', output='bundle.js')
assets.register('js_all', js)

# CONSTANTS
KEY = "AIzaSyCCl7-ieDSLRydryyQ1JaypI_dKuBhqfOc"
TOTAL_IP_ADDRESSES = 6068377
DATABASE_PATH = './data/ip_addresses.sqlite3'

# ROUTES

# Index: Displays a static map on load


@app.route("/")
def index():
    return render_template("index.html", key=KEY)


# Routers: Generates GeoJSON locations of _num_routers_ routers
@app.route("/routers")
def routers():
    # 1. Clear "routers" table

    # 2. Update routers table with a new set of ip addresses & coordinates
    num_routers = request.args.get("num_routers")

    # test_router = Routers('test', 'test', 'test')
    # db.session.add(test_router)
    # Transfer routers from ip_addresses table to routers table
    for ip in query_db('SELECT * FROM ip_addresses ORDER BY RANDOM() LIMIT ' + num_routers, one=False):
        print(ip)

    # db.session.commit()

    return jsonify("Routers")


# Animate: Sends the request asynchronously, and runs an animation
@ app.route("/animate")
def animate():
    # Run the AJAX request
    requestData = request.args.get("request_data")

    # Provide the response data to the template
    return jsonify("animate")


# Helpers

# get_db
# Retrieves ip address database for usage
def get_db():
    db2 = getattr(g, '_database', None)
    if db2 is None:
        db2 = g._database = sqlite3.connect(DATABASE_PATH)
        db2.row_factory = sqlite3.Row
    return db2


# query_db
# Once created, queries the ip address database
def query_db(query, args=(), one=False):
    cur = get_db().execute(query, args)
    rv = cur.fetchall()
    cur.close()
    return (rv[0] if rv else None) if one else rv


# close_connection
# Closes the database when finished
@app.teardown_appcontext
def close_connection(exception):
    db2 = getattr(g, '_database', None)
    if db2 is not None:
        db2.close()


# Run app
if __name__ == "__main__":
    db.create_all()
    app.run(debug=True)
