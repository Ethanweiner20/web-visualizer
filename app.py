import os
import jsmin
import csv
import random
import itertools
from flask import Flask, jsonify, request, render_template
from flask_sqlalchemy import SQLAlchemy
from flask_assets import Environment, Bundle

# IP-related imports:
# import socket
# import ipinfo

# An IPCoordinate is a dictionary:
# {
#   ip: String
#   latitude: Number
#   longitude: Number
# }

# App configuration
app = Flask(__name__)
assets = Environment(app)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data/ip_addresses.sqlite3'
app.config['SQLALCHEMY_ECHO'] = True
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Set up IP address database and IP Address model
# Class inherits db.Model
db = SQLAlchemy(app)


class IPAddresses(db.Model):
    # Autogenerated id (primary key)
    id = db.Column("id", db.Integer, primary_key=True)
    ip = db.Column(db.String(45))
    latitude = db.Column(db.String(20))
    longitude = db.Column(db.String(20))

    # init : Used to create an IPAddress object
    def __init__(self, ip, latitude, longitude):
        self.ip = ip
        self.latitude = latitude
        self.longitude = longitude

    # repr : Represent the object as a string
    def __repr__(self):
        return 'IP: ' + self.id + ', Latitude: ' + self.latitude + ', Longitude: ' + self.longitude


test_ip = IPAddresses(ip='192.13.3', latitude='100', longitude='100')

# db.session.add(new_ip)
# Equivalent to SQL SELECT query (select all entries in table)
# print(IPAddresses.query.all())

# Bundle javascript files into minified "bundle.js"
js = Bundle('js/jquery.min.js', 'js/store.js', 'js/animation.js', 'js/helpers.js', 'js/index.js',
            filters='jsmin', output='bundle.js')
assets.register('js_all', js)

# CONSTANTS
KEY = "AIzaSyCCl7-ieDSLRydryyQ1JaypI_dKuBhqfOc"
TOTAL_IP_ADDRESSES = 6068377

# ROUTES

# Index: Displays a static map on load


@app.route("/")
def index():
    return render_template("index.html", key=KEY)


# Routers: Generates GeoJSON locations of _num_routers_ routers
@app.route("/routers")
def routers():
    # 1. Clear routers.db

    # 2. Update routers.db with new coordinates
    num_routers = int(request.args.get("num_routers"))

    with open('data/ip_addresses.csv') as ip_addresses:
        ip_addresses_reader = csv.DictReader(ip_addresses)

        # Generate a random # to select from all the routers
        for i in range(0, num_routers):
            router_index = random.randint(0, TOTAL_IP_ADDRESSES - 1)
            # Store this coordinate in routers.db

    return jsonify("Routers")


# Animate: Sends the request asynchronously, and runs an animation
@ app.route("/animate")
def animate():
    # Run the AJAX request
    requestData = request.args.get("request_data")

    # Provide the response data to the template
    return jsonify("animate")


# Run app
if __name__ == "__main__":
    # Create database, if it doesn't exist
    db.create_all()
    app.run()
